name: ArgoCD Deployment Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Kind
      uses: engineerd/setup-kind@v0.6.0

    - name: Set up kubectl
      uses: azure/setup-kubectl@v4

    - name: Install Helm
      uses: azure/setup-helm@v4.3.0

    - name: Install Argo CLI
      run: |
        curl -sSL -o argo-linux-amd64 https://github.com/argoproj/argo/releases/download/v1.8.7/argo-linux-amd64
        chmod +x argo-linux-amd64
        sudo mv argo-linux-amd64 /usr/local/bin/argo

    - name: Create Kind cluster
      run: kind create cluster --name argocd-test

    - name: Deploy ArgoCD
      run: |
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

    - name: Wait for ArgoCD to be ready
      run: |
        kubectl wait --namespace argocd \
          --for=condition=available deployment/argocd-server \
          --timeout=300s

    - name: Get ArgoCD admin password
      run: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode > argocd-password.txt

    - name: Login to ArgoCD
      run: |
        argo login localhost:8080 --username admin --password $(cat argocd-password.txt) --insecure

    - name: Deploy applications
      run: |
        argo app create devops --repo https://github.com/${{ github.repository }} --path devops/argocd --dest-server https://kubernetes.default.svc --dest-namespace default
        argo app sync devops

    - name: Verify deployment
      run: |
        argo app wait devops --timeout 300

    - name: Clean up Kind cluster
      run: kind delete cluster --name argocd-test
